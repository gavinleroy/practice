#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <memory>

/*************************************************
 *           ADVENT OF CODE DAY 12
 *
 *If you are doing part 1, don't pass anything in
 *for argv
 *
 *If you are doing part 2 pass anything into argv
 *
 *
 *
 *
 *
 *
 ************************************************/

void setArray(int (&bet)[26], int argc){
    for(unsigned int i = 0; i < 26; ++i){
        if(i == 2 && argc == 2){
            bet[i] = 1;
        }else{
            bet[i] = 0;
        }
    }
}

void printBet(int (&bet)[26]){
    for(unsigned int i = 0; i < 26; ++i){
        std::cout << bet[i] << " ";
    }
    std::cout << std::endl;
}

void print(std::vector<std::vector<std::string> > broken){
    for(unsigned int i = 0; i < broken.size(); ++i){
        for(unsigned int k = 0; k < broken[i].size(); ++k){
            std::cout << broken[i][k] << " ";
        }
        std::cout << std::endl;
    }
}

void fillThingy(std::vector<std::vector<std::string> >& bigBroken){
    
    std::ifstream fin("/Users/gavingray/Desktop/input.txt");
    std::string temp;
    
    while(std::getline(fin, temp)){
        std::string secTemp;
        std::vector<std::string> broken;
        std::istringstream sin(temp);
        
        while(std::getline(sin, secTemp, ' ')){
            broken.push_back(secTemp);
        }
        
        bigBroken.push_back(broken);
        
    }
    
    fin.close();
    
}

int actOnInput(std::vector<std::string> string, int (&bet)[26]){
    int offset = 0;
    
    switch(string[0][0]){
        case 'c':
            if(isalpha(string[1][0])){
                bet[string[2][0] - 97] = bet[string[1][0] - 97];
            }else{
                bet[string[2][0] - 97] = std::stoi(string[1]);
            }
            break;
            
        case 'j':
            if(bet[string[1][0] - 97] != 0){
                offset = std::stoi(string[2]);
            }
            break;
            
        case 'i':
            bet[string[1][0] - 97]++;
            break;
            
        case 'd':
            bet[string[1][0] - 97]--;
            break;
            
        default:
            break;
            
    }
    
    return offset;
}

int main(int argc, char* argv[]){
    
    std::vector<std::vector<std::string> > entireBroken;
    int alphabet[26];
    
    fillThingy(entireBroken);
    
    setArray(alphabet, argc);
    
    
    for(unsigned int i = 0; i < entireBroken.size(); ++i){
        int addition = actOnInput(entireBroken[i], alphabet);
        if(addition != 0){
            i += addition - 1;
        }
    }
    
    std::cout << "The value left in register 'a': " << alphabet[0] << std::endl;
    
    return 0;
}
